---
import { remark } from 'remark'
import { TECH_MAP, type Technology } from '../../assets/technology'
import type { Project } from '../../types'
import remarkHtml from 'remark-html'
import TechnologyIcon from './TechnologyIcon.astro'
import Status from './Status.astro'
import { Github } from 'lucide-astro'
import PublishTime from '../blog/PublishTime'
import Timeline from '../activity/Timeline.astro'

interface Props {
    project: Project
}

const { project } = Astro.props

const technologies: Technology[] = TECH_MAP[project.project_id] ?? []

const parsed = project.specification ? await remark().use(remarkHtml).process(project.specification) : null
---

<section class="flex-grow w-max flex flex-col">
<div class="flex flex-row gap-3 justify-left items-center">
    <h1>{project.name}</h1>
    {
        project.current_version ? (
            <div
                class="flex border-1 border-accent-btn-primary h-min text-accent-btn-primary px-2 w-min rounded-md font-bold -py-1 text-sm mt-1.5"
                title={`Current version: ${project.current_version}`}
            >
                <span>{project.current_version}</span>
            </div>
        ) : null
    }
</div>
<div class="flex flex-row gap-2 flex-wrap justify-start text-sm mt-1">
    <Status status={project.status} size={16} />
    {
        project.repo_url && (
            <div class="rounded border border-borders-primary px-2 py-1 font-bold">
                <a href={project.repo_url} class="flex flex-row gap-1 items-center">
                    <>
                        <Github size={16} />
                        <p>GitHub</p>
                    </>
                </a>
            </div>
        )
    }
    {
        project.link_url && (
            <div class="rounded border border-borders-primary px-2 py-1 font-bold">
                <a href={project.link_url}>{project.link_text}</a>
            </div>
        )
    }
</div>
{
    project.updated_at ? (
        <div class="text-sm mt-1">
            <>
                <span>Last updated </span>
                <PublishTime client:load date={project.updated_at} />
            </>
        </div>
    ) : null
}

<h2 class="mt-2">Description</h2>
<p>{project.description}</p>

{
    project.specification ? (
        <>
            <h2 class="mt-2 -mb-2">Specification</h2>
            <article class="specification">{parsed}</article>
        </>
    ) : null
}

{
    technologies.length > 0 ? (
        <>
            <h2 class="mt-4">Technologies</h2>
            <ul class="flex flex-col gap-0 tech-list mt-0.5">
                {technologies.map((tech) => (
                    <div class="flex flex-row gap-2 items-center">
                        <span>â€¢</span>
                        <span class="mt-[2.2px]">
                            <TechnologyIcon tech={tech} />
                        </span>
                        <span class="capitalize">{tech}</span>
                    </div>
                ))}
            </ul>
        </>
    ) : null
}
</section>

<section class="flex flex-col gap-2 w-[400px]">
{
    project.repo_url ? (
        <>
            <h2>Recent Commits</h2>
            <Timeline project_repo={project.repo_url} limit={10} group_commits={false} /> 
        </>
    ) : null
}
</section>

<!-- TODO: screenshots -->

<!-- TODO: recent releases -->


<!-- TODO: roadmap -->
