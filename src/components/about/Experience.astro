---
import moment from 'moment'
import { experience } from '../../assets/experience'
import type { Experience } from '../../assets/experience'
import SkillEvents from '../about/SkillEvents.astro'
import { formatDuration } from '../../utils'
interface Props {
    types: readonly Experience['type'][]
    sort: 'latest' | 'earliest' | 'position' | 'reverse_position'
    mode: 'left' | 'middle'
}

const { types, sort, mode } = Astro.props

const experiences = Object.entries(experience)
    .map(([id, data]) => ({ id, ...data }))
    .filter((exp) => types.includes(exp.type))

// based on the sort prop, sort by latest or earliest
if (sort == 'latest') {
    // sort by the latest end time, if null (present), sort by start date (latest first)
    experiences.sort((a, b) => {
        if (a.end_date == null && b.end_date == null) return b.start_date.getTime() - a.start_date.getTime()
        if (a.end_date == null) return -1
        if (b.end_date == null) return 1
        return b.end_date.getTime() - a.end_date.getTime()
    })
} else if (sort == 'earliest') {
    experiences.sort((a, b) => {
        return a.start_date.getTime() - b.start_date.getTime()
    })
} else if (sort == 'position') {
    experiences.sort((a, b) => a.position - b.position)
} else if (sort == 'reverse_position') {
    experiences.sort((a, b) => b.position - a.position)
}

moment.locale('en-au')
---

{
    mode == 'left' ? (
        <div class="pl-[32px] relative flex flex-col gap-5">
            <div class="absolute left-[19.5px] h-[calc(100%-15px)] w-[1px] bg-gray-50 mt-[10px]" />
            {experiences.map((experience) => {
                const date_string = `${moment(experience.start_date).calendar()} - ${experience.end_date ? moment(experience.end_date).calendar() : 'Present'}`
                const duration = experience.end_date ? moment.duration(moment(experience.end_date).diff(experience.start_date)) : null
                const title = experience.title
                return (
                    <div class="flex flex-col gap-1 relative">
                        <div class="w-2 h-2 rounded-full absolute -left-[16px] top-[6px] bg-gray-50" />
                        <div class="flex flex-col">
                            <label class="text-sm -mb-1">
                                <span>{date_string}</span>
                                {duration && <span> ({formatDuration(duration)})</span>}
                            </label>
                            <h3>{title}</h3>
                        </div>
                        <div class="pl-4 flex flex-col gap-2">
                            <p>{experience.description}</p>
                            <div class="flex flex-row gap-3 items-center flex-wrap">
                                <span class="-mr-1">Skills: </span>
                                {experience.skills.map((event) => (
                                    <SkillEvents event={event} />
                                ))}
                            </div>
                        </div>
                    </div>
                )
            })}
        </div>
    ) : (
        <div class="relative grid gap-5 w-full" style={{gridTemplateColumns: "minmax(0, 1fr) 1px minmax(0,1fr)"}}>
            <div id="timeline-left" class="flex flex-grow flex-col gap-16 w-full">
                {experiences.map((experience, index) => {
                    if (index % 2 == 1) return
                    const date_string = `${moment(experience.start_date).calendar()} - ${
                        experience.end_date ? moment(experience.end_date).calendar() : 'Present'
                    }`
                    const duration = experience.end_date ? moment.duration(moment(experience.end_date).diff(experience.start_date)) : null
                    const title = experience.title
                    return (
                        <div class="flex flex-col gap-1 relative items-end text-right min-h-[20rem]">
                            <div class="w-2 h-2 rounded-full absolute top-[6px] bg-gray-50 -right-[24px]" />
                            <div class="flex flex-col">
                                <label class="text-sm -mb-1">
                                    <span>{date_string}</span>
                                    {duration && <span> ({formatDuration(duration)})</span>}
                                </label>
                                <h3>{title}</h3>
                            </div>
                            <div class="pl-4 flex flex-col gap-2">
                                <p>{experience.description}</p>
                                <div class="flex flex-row gap-3 items-center flex-wrap justify-end">
                                    <span class="-mr-1">Skills: </span>
                                    {experience.skills.map((event) => (
                                        <SkillEvents event={event} />
                                    ))}
                                </div>
                            </div>
                        </div>
                    )
                })}
            </div>
            <div class="min-h-full min-w-[1px] w-[1px] bg-gray-50 mt-[10px]" />
            <div id="timeline-right" class="mt-[10rem] flex-grow flex flex-col gap-16 w-full">
                {experiences.map((experience, index) => {
                    if (index % 2 == 0) return
                    const date_string = `${moment(experience.start_date).calendar()} - ${
                        experience.end_date ? moment(experience.end_date).calendar() : 'Present'
                    }`
                    const duration = experience.end_date ? moment.duration(moment(experience.end_date).diff(experience.start_date)) : null
                    const title = experience.title
                    return (
                        <div class="flex flex-col gap-1 relative min-h-[20rem]">
                            <div class="w-2 h-2 rounded-full absolute top-[6px] bg-gray-50 -left-[24px]" />
                            <div class="flex flex-col">
                                <label class="text-sm -mb-1">
                                    <span>{date_string}</span>
                                    {duration && <span> ({formatDuration(duration)})</span>}
                                </label>
                                <h3>{title}</h3>
                            </div>
                            <div class="pl-4 flex flex-col gap-2">
                                <p>{experience.description}</p>
                                <div class="flex flex-row gap-3 items-center flex-wrap">
                                    <span class="-mr-1">Skills: </span>
                                    {experience.skills.map((event) => (
                                        <SkillEvents event={event} />
                                    ))}
                                </div>
                            </div>
                        </div>
                    )
                })}
            </div>
        </div>
    )
}
