---
import moment from 'moment'
import { experience } from '../../assets/experience'
import type { Experience } from '../../assets/experience'
import ExperienceCard from "./ExperienceCard.astro";
interface Props {
    types: readonly Experience['type'][]
    sort: 'latest' | 'earliest' | 'position' | 'reverse_position'
    mode: 'left' | 'middle'
}

const { types, sort, mode } = Astro.props

const experiences = Object.entries(experience)
    .map(([id, data]) => ({ id, ...data }))
    .filter((exp) => types.includes(exp.type))

// based on the sort prop, sort by latest or earliest
if (sort == 'latest') {
    // sort by the latest end time, if null (present), sort by start date (latest first)
    experiences.sort((a, b) => {
        if (a.end_date == null && b.end_date == null) return b.start_date.getTime() - a.start_date.getTime()
        if (a.end_date == null) return -1
        if (b.end_date == null) return 1
        return b.end_date.getTime() - a.end_date.getTime()
    })
} else if (sort == 'earliest') {
    experiences.sort((a, b) => {
        return a.start_date.getTime() - b.start_date.getTime()
    })
} else if (sort == 'position') {
    experiences.sort((a, b) => a.position - b.position)
} else if (sort == 'reverse_position') {
    experiences.sort((a, b) => b.position - a.position)
}

const tags = !(types.length == 1 && types[0] == "professional");

moment.locale('en-au')
---

{
    mode == 'left' ? (
        <div class="pl-[32px] relative flex flex-col gap-5">
            <div class="absolute left-[19.5px] h-[calc(100%-15px)] w-[1px] bg-gray-50 mt-[10px]" />
            {experiences.map((experience) => <ExperienceCard experience={experience} type={"normal"} tags={tags} />)}
        </div>
    ) : (
        <div class="relative grid gap-5 w-full" style={{gridTemplateColumns: "minmax(0, 1fr) 1px minmax(0,1fr)"}}>
            <div id="timeline-left" class="flex flex-grow flex-col gap-16 w-full">
                {experiences.filter((_, index) => index % 2 == 0).map((e) => <ExperienceCard experience={e} type={"left"} tags={tags} />)}
            </div>
            <div class="min-h-full min-w-[1px] w-[1px] bg-gray-50 mt-[10px]" />
            <div id="timeline-right" class="mt-[7rem] flex-grow flex flex-col gap-16 w-full">
                {experiences.filter((_, index) => index % 2 == 1).map((e) => <ExperienceCard experience={e} type={"right"} tags={tags}/>)}
            </div>
        </div>
    )
}
