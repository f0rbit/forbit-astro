---
import moment from 'moment'
import type { Experience } from '../../assets/experience'
import { formatDuration } from '../../utils'
import SkillEvents from '../about/SkillEvents.astro'
import AwardTypeIcon from '../projects/AwardTypeIcon.astro'
import CompactText from '../CompactText.astro'
interface Props {
    experience: Experience & { id: string }
    type: 'left' | 'right' | 'normal'
    tags: boolean
}

const { experience, type, tags } = Astro.props

const date_string = `${moment(experience.start_date).calendar()} - ${experience.end_date ? moment(experience.end_date).calendar() : 'Present'}`
const duration = experience.end_date ? moment.duration(moment(experience.end_date).diff(experience.start_date)) : moment.duration(moment().diff(experience.start_date))
const { title, awards } = experience
---

<div class={`flex flex-col gap-1 relative ${['left', 'right'].includes(type) ? 'min-h-[10rem]' : ''} ${type == 'left' ? 'items-end text-right' : ''}`}>
    <div
        class={`w-2 h-2 rounded-full absolute bg-base-text-subtlish 
            ${type == 'normal' ? '-left-[16px] top-[6px]' : ''} 
            ${type == 'right' ? 'top-[6px] -left-[23.5px]' : ''} 
            ${type == 'left' ? 'top-[6px] -right-[23.5px]' : ''}
        `}
    >
    </div>
    <div class="flex flex-col">
        <label class="text-sm -mb-1">
            <span>{date_string}</span>
            {duration && <span> ({formatDuration(duration)})</span>}
        </label>
        <div class={`flex ${type == 'left' ? 'flex-row-reverse' : 'flex-row'} items-center gap-0.5 `}>
            <h3 id={experience.id}>{title}</h3>
            {tags && <div class="text-sm scale-[0.75] mt-[2px] border px-2 rounded capitalize flex">{experience.type}</div>}
        </div>
    </div>
    <div class={`flex flex-col gap-2 ${type == 'left' ? 'pr-3' : 'pl-3'}`}>
        <div><CompactText text={experience.description} id={experience.title.toLowerCase().replaceAll(' ', '_')} /></div>
        <div class={`flex flex-row gap-3 items-center flex-wrap ${type == 'left' ? 'justify-end' : ''}`}>
            {
                awards.map((award) => (
                    <div class="flex flex-row items-center gap-2 border border-borders-primary rounded px-2 py-1" title={award.description}>
                        <AwardTypeIcon type={award.type} size={20} />
                        <span>{award.title}</span>
                    </div>
                ))
            }
            {experience.skills.map((event) => <SkillEvents event={event} />)}
        </div>
    </div>
</div>
